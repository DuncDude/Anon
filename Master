
#ANon
# an system for storing password and user idenites  to better stay anon online
#Desifned by Duncan ANdrews November 2018
#Libraies
try:
	import os

	import json

	import random

	import fnmatch

	import os.path


	from Crypto.Hash import SHA256
	from Crypto.Cipher import AES
	import os, random, sys, pkg_resources


except:
	print("You are missing one of the libraries, perhaps you can install it.\nTry using 'pip python install  --library--'")
	print("\nLIBRARIES NEEDED: \njson \nrandom \nfnmatch \nCrypto \nCryptograpy")
	Pause()
#global Varibles

key = " "
cipher_suite= ""
#Random values for profile creatiom
rand = [
	["john","andy","sarah","Jess"],
	["male","female"],
	["Catcher in the Rye", "LOTR", "On The Road", "Survior", "FareWell to Arms"],
        ["King", "Piper", "Larson", "Stewart", "Anderson"],
	["Eagle", "Wolf", "Devils", "Tornados", "Sharks"],
	["Raleigh", "NYC", "Atlanta", "Los Angeles", "Tampa"],
        ["Fluffly", "Oreo", "Brownie", "Dancer"],
	["CRV", "Accord", "Camaro", "Eclipse", "GTR", "Impala", "F150", "Mustang"],
	["Pizza", "HotDogs", "Fries", "Pasta", "Gyro"],
	["Greg", "Nathan", "Carl", "Max"]
	]


def Pause():
	pase = raw_input("Press Enter.. ")
	return


def Banner():
#Prints banner and clear screen at each new page
	#clear screen
	os.system('cls' if os.name == 'nt' else 'clear')
	print("   _____                        ")
        print("   /  _  \   ____   ____   ____  ")
        print("  /  /_\  \ /    \ /  _ \ /    \ ")
        print(" /    |    \   |  (  <_> )   |  \ ")
        print(" \____|__  /___|  /\____/|___|  /")
        print("         \/     \/            \/")
	print("__________________________________")
	#return to function that called
	return






 
def encrypt(key, filename):
        chunksize = 64 * 1024
        outFile = os.path.join(os.path.dirname(filename), "(encrypted)"+os.path.basename(filename))
        filesize = str(os.path.getsize(filename)).zfill(16)
        IV = ''
 
        for i in range(16):
                IV += chr(random.randint(0, 0xFF))
       
        encryptor = AES.new(key, AES.MODE_CBC, IV)
 
        with open(filename, "rb") as infile:
                with open(outFile, "wb") as outfile:
                        outfile.write(filesize)
                        outfile.write(IV)
                        while True:
                                chunk = infile.read(chunksize)
                               
                                if len(chunk) == 0:
                                        break
 
                                elif len(chunk) % 16 !=0:
                                        chunk += ' ' *  (16 - (len(chunk) % 16))
 
                                outfile.write(encryptor.encrypt(chunk))
 
 
def decrypt(key, filename):
        outFile = os.path.join(os.path.dirname(filename), os.path.basename(filename[11:]))
        chunksize = 64 * 1024
        with open(filename, "rb") as infile:
                filesize = infile.read(16)
                IV = infile.read(16)

                decryptor = AES.new(key, AES.MODE_CBC, IV)
                with open(outFile, "wb") as outfile:
                        while True:
                                chunk = infile.read(chunksize)
                                if len(chunk) == 0:
                                        break

                                outfile.write(decryptor.decrypt(chunk))

                        outfile.truncate(int(filesize))

def allfiles():
        allFiles = []
        for root, subfiles, files in os.walk(os.getcwd()):
                for names in files:
                        allFiles.append(os.path.join(root, names))

        return allFiles

def Save():
	Banner()
	print("----------Encryption Options")
	print('\x1b[0;36;40m' + "Working  Profiles: " + '\x1b[0m')
        #Run through and print files in folder here
        listOfFiles = os.listdir('.')
        pattern = "*.txt"
        for entry in listOfFiles:
                if fnmatch.fnmatch(entry, pattern):
                        print('\x1b[0;34;40m' + entry + '\x1b[0m')
	print("By default and for safety all other files in directory that are not encrypted\nwill be when the Encryption option is choosen")
	choice = raw_input("Do you want to (E)ncrypt or (D)ecrypt? Or leave Blank to return Home: ")
	if  choice == '':
		Home()
	password1 = raw_input("Enter the password: ")
	password = raw_input("Enter the password again: ")
	if  password1 == password:
		encFiles = allfiles()
		if choice == "E":
	        	for Tfiles in encFiles:
	                	if os.path.basename(Tfiles).startswith("(encrypted)"):
	                        	print "%s is already encrypted" %str(Tfiles)
	                        	pass
		                elif Tfiles == os.path.join(os.getcwd(), sys.argv[0]):
	        	                pass
	                	else:
	                        	encrypt(SHA256.new(password).digest(), str(Tfiles))
	                        	print "Done encrypting %s" %str(Tfiles)
	                       		os.remove(Tfiles)
	
		elif choice == "D":
	        	filename = raw_input("Enter the filename to decrypt: ")
	        	if not os.path.exists(filename):
	        	        print "The file does not exist"
	        	        Save()
	        	elif not filename.startswith("(encrypted)"):
	        	        print "%s is already not encrypted" %filename
	        	        Save()
	        	else:
	        	        decrypt(SHA256.new(password).digest(), filename)
	        	        print "Done decrypting %s" %filename
	        	        os.remove(filename)
	else:
	        print ('\x1b[0;31;40m' + "Passwords do not match!" + '\x1b[0m')
	        Pause()
		Save()
	Pause()

def Del(profile):
	Banner()
	print("----------Delete entry")
	choice = profile["Name"]
	for x in profile:
                print('\x1b[0;36;40m' + x + '\x1b[0m')
	article = raw_input("Enter entry you want to delete: ")
	if article:
		try:
			del profile[article]
			print('\x1b[0;31;40m' + article + " Deleted"+ '\x1b[0m')
			#save Changes
			#make File for info
			file_name = profile["Name"] + ".txt"
        		#Dump to file with json this also close the file with
       			with open(file_name, "w+") as outfile:
        			json.dump(profile, outfile)

			Pause()
			Browse(choice)
		except:
			Browse(choice)
	else:
		Browse(choice)

def Edit(profile):
	Banner()
	print("----------Edit Entrys")

	#Make choice an string to pass back to  browse
	choice = profile["Name"]
	#Generate a random password if wanted to use
	s = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	#pass word length
	passlen = 10
	p = "".join(random.sample(s,passlen))
	print ("Random Password: " + p)
	for x in profile:
	        print('\x1b[0;36;40m' + x + '\x1b[0m')
	#
	article = raw_input("Enter a new entry for new data or an existing entry to edit: ")

	if article:
		#compare profile to current entrys in profile
		if article in profile:
			print('\x1b[0;31;40m' + "This entry already exists! This will Erase current data for that entry!"+ '\x1b[0m')
			info = raw_input("Enter Data: ")
			profile[article] = info
		else:
			info = raw_input("Enter Data: ")
			profile[article] = info
	else:
		Browse(choice)
	#Save Data
	#make File for info
        file_name = profile["Name"] + ".txt"
        #Dump to file with json this also close the file with
        with open(file_name, "w+") as outfile:
                json.dump(profile, outfile)
        Pause()
        Browse(choice)

#def Create_random():
def Browse(choice):
	Banner()
	print("----------Browse Profile")
	#open File
	with open(choice + ".txt") as json_file:
		profile = json.load(json_file)

	#Loopnthrough json dict data show profile info
	for x in profile:
		print('\x1b[0;36;40m' + x + '\x1b[0m' + ": " + '\x1b[0;34;40m' +  profile[x] + '\x1b[0m')

	article = raw_input("To view details type that Entry \nTo create a new Entry type new \nTo delete an entry type del \nleave blank for home: ")
	if article:
		#compare profile to  key names
		for x in profile:
			if article == x:
				print('\x1b[0;34;40m' + profile[x] + '\x1b[0m')
				Pause()
				#return to Browse to ask for new option
				Browse(choice)
			#goto edit passing the profile
		if article == "new":
			Edit(profile)
		if article == "del":
			Del(profile)
		else:
			Browse(choice)
	#if the is no entry redirect home
	else:
		Home()


def Create():
	Banner()
	print("----------Create Profile")
	#make random list global to call from
	global rand
	#Create Dictionary for the info
	profile ={
	}

	thislist = [
	"Name",

	"Sex",

	"FavoriteBook",

	"MothersMaiden",

	"HighSchoolMascot",

	"HomeTown",

	"PetsName",

	"FirstCar",

	"FavoriteFood",

	"FathersMiddleName"
	]
	#create counter for random list
	counter = 0
	print("Welcome to the Profile Wizard!\nCreate a new profile by entering info followed by the Enter key or\nor just press Enter at any question for a random answer.")

	#loop through dictonary 
	for x in thislist:
		print('\x1b[0;36;40m' + x + ': ' +  '\x1b[0m')
		info  = raw_input()
		#checks to see if random wanted
		if info == "":
			#then find the length of the relavent row and genatre a random profile to fill the info input
			max = len(rand[counter])
			random_info = rand[counter][random.randint(0,1)]
			profile[x]=random_info
			print profile[x]
			counter += 1
		else:
			counter += 1
			profile[x]=info
		
	#make File for info
	file_name = profile["Name"] + ".txt"
	#Dump to file with json this also close the file with
	with open(file_name, "w+") as outfile:
		json.dump(profile, outfile)
	Pause()
	return

def Home():
	Banner()
	print("----------Home")
	print('\x1b[0;36;40m' + "Working  Profiles: " + '\x1b[0m')
	#Run through and print files in folder here
	listOfFiles = os.listdir('.')
	pattern = "*.txt"
	for entry in listOfFiles:
		if fnmatch.fnmatch(entry, pattern):
			print('\x1b[0;34;40m' + entry + '\x1b[0m')
	print('Options:')
	print("1. Make new Profile\n2. Profile Encryption/Decryption options\n3. Exit")
	print("Type a number of an option, or type the of name of a profile view or edit that profile\nThe profile must not be encrypted to view.")
	choice = raw_input("Enter choice: ")
	if choice:
		if choice == '1':
			Create()
		if choice == '2':
			Save()
		if choice =='3':
			raise SystemExit
	        for entry in listOfFiles:
        	        if fnmatch.fnmatch(entry, pattern):
				if choice + ".txt" == entry:
					Browse(choice)
		else:
			Home()
	else:
		Home()

#run begining
Home()



